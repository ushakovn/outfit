package message

import (
  "fmt"
  "strings"

  "github.com/ushakovn/outfit/internal/models"
)

type Builder struct {
  product  models.Product
  diff     models.ProductDiff
  tracking models.Tracking
}

func Do() Builder {
  return Builder{}
}

func (b Builder) SetProduct(product models.Product) Builder {
  b.product = product
  return b
}

func (b Builder) SetProductDiff(diff models.ProductDiff) Builder {
  b.diff = diff
  return b
}

func (b Builder) SetTracking(tracking models.Tracking) Builder {
  b.tracking = tracking
  return b
}

func (b Builder) SetProductPtr(product *models.Product) Builder {
  b.product = *product
  return b
}

func (b Builder) SetProductDiffPtr(diff *models.ProductDiff) Builder {
  b.diff = *diff
  return b
}

func (b Builder) SetTrackingPtr(tracking *models.Tracking) Builder {
  b.tracking = *tracking
  return b
}

type BuildResult struct {
  Message    models.TrackingMessage
  IsSendable bool
}

func (b Builder) BuildDiffMessage() BuildResult {
  var (
    isSendable   bool
    isInStock    bool
    isPriceLower bool
  )

  text := fmt.Sprintf(`<b>–û–ø–æ–≤–µ—â–µ–Ω–∏–µ –ø–æ —Ç–æ–≤–∞—Ä—É ü§†:</b>
%s %s %s
(–°—Å—ã–ª–∫–∞: %s)

`, b.product.Brand, b.product.Category, b.product.Description,
    b.product.URL)

  for _, option := range b.diff.Options {

    if option.Stock.IsComeToInStock {
      isSendable = true

      text += fmt.Sprintf(`<b>–†–∞–∑–º–µ—Ä: %s %s –ø–æ—è–≤–∏–ª—Å—è –≤ –Ω–∞–ª–∏—á–∏–µ üì¶!</b>
–î–æ—Å—Ç—É–ø–µ–Ω –≤ –∫–æ–ª–∏—á–µ—Å—Ç–≤–µ: %d —à—Ç.
`,
        option.Size.Brand.Value, option.Size.Brand.System,
        option.Stock.Quantity,
      )

    } else if option.Stock.IsAvailable {
      isInStock = true

      text += fmt.Sprintf(`–†–∞–∑–º–µ—Ä: %s %s –≤ –Ω–∞–ª–∏—á–∏–µ.
–î–æ—Å—Ç—É–ø–µ–Ω –≤ –∫–æ–ª–∏—á–µ—Å—Ç–≤–µ: %d —à—Ç.
`,
        option.Size.Brand.Value, option.Size.Brand.System,
        option.Stock.Quantity)
    }

    if option.Price.IsLower {
      isPriceLower = true

      text += fmt.Sprintf(`<b>–¶–µ–Ω–∞ –Ω–∞ —Ä–∞–∑–º–µ—Ä –±—ã–ª–∞ —Å–Ω–∏–∂–µ–Ω–∞ üìâ!</b>
–ù–æ–≤–∞—è —Ü–µ–Ω–∞: %s.
(–°—Ç–∞—Ä–∞—è —Ü–µ–Ω–∞: %s. –†–∞–∑–Ω–∏—Ü–∞: %s)`, option.Price.New, option.Price.Old, option.Price.Diff)

    } else {

      text += fmt.Sprintf(`–¶–µ–Ω–∞ –Ω–∞ —Ä–∞–∑–º–µ—Ä: %s.`, option.Price.New)
    }

    text += "\n\n"

    if isInStock && isPriceLower {
      isSendable = true
    }
  }

  text = strings.TrimSpace(text)

  return BuildResult{
    Message: models.TrackingMessage{
      Product:     b.product,
      ProductDiff: b.diff,
      TextValue:   text,
    },
    IsSendable: isSendable,
  }
}

func (b Builder) BuildProductMessage() BuildResult {
  text := fmt.Sprintf(`–¢–æ–≤–∞—Ä üì¶:
%s %s %s
(–°—Å—ã–ª–∫–∞: %s)
`, b.product.Brand, b.product.Category, b.product.Description,
    b.product.URL)

  for index, option := range b.product.Options {

    if option.Stock.Quantity != 0 {

      text += fmt.Sprintf(`
%d. –†–∞–∑–º–µ—Ä: %s %s –≤ –Ω–∞–ª–∏—á–∏–µ.
–ö–æ–ª-–≤–æ: %d —à—Ç.`,
        index+1,
        option.Size.Brand.Value, option.Size.Brand.System,
        option.Stock.Quantity)

    }

    if option.Stock.Quantity == 0 && option.Size.EmbedNotFoundSize == nil {

      text += fmt.Sprintf(`
%d. –†–∞–∑–º–µ—Ä: %s %s –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –≤ –Ω–∞–ª–∏—á–∏–µ.`,
        index+1,
        option.Size.Brand.Value, option.Size.Brand.System)
    }

    if option.Size.EmbedNotFoundSize != nil {

      text += fmt.Sprintf(`
%d. –†–∞–∑–º–µ—Ä: %s –Ω–µ –±—ã–ª –Ω–∞–π–¥–µ–Ω –Ω–∞ —Å–∞–π—Ç–µ.`,
        index+1,
        option.Size.EmbedNotFoundSize.StringValue)
    }

    if option.Size.EmbedNotFoundSize == nil {

      text += fmt.Sprintf(`
–¶–µ–Ω–∞: %s.
`,
        option.Price.Discount.StringValue)
    }
  }

  text = strings.TrimSpace(text)

  return BuildResult{
    Message: models.TrackingMessage{
      Product:   b.product,
      TextValue: text,
    },
    IsSendable: true,
  }
}

func (b Builder) BuildTrackingMessage() BuildResult {
  text := fmt.Sprintf(`–¢–æ–≤–∞—Ä üì¶:
%s %s %s
(–°—Å—ã–ª–∫–∞: %s)

`, b.tracking.ParsedProduct.Brand,
    b.tracking.ParsedProduct.Category,
    b.tracking.ParsedProduct.Description,

    b.tracking.ParsedProduct.URL)

  text += `–£–∫–∞–∑–∞–Ω–Ω—ã–µ —Ä–∞–∑–º–µ—Ä—ã üìã:
`

  for index, label := range b.tracking.Sizes.Values {
    text += fmt.Sprintf("%d. %s", index+1, label)

    if index != len(b.tracking.Sizes.Values)-1 {
      text += "\n"
    }
  }
  text = strings.TrimSpace(text)

  return BuildResult{
    Message: models.TrackingMessage{
      Product:   b.product,
      TextValue: text,
    },
    IsSendable: true,
  }
}
