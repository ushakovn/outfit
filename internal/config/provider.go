// Code generated by Boiler; DO NOT EDIT.

package config

import (
	"context"
	"github.com/ushakovn/boiler/pkg/config/types"
	"sync/atomic"
)

// Provider config value provider
type Provider struct {
	key   configKey
	value atomic.Value
}

// NewProvider create new Provider for specified key
func NewProvider(ctx context.Context, key configKey) *Provider {
	p := new(Provider)
	p.key = key
	value := Get(ctx, key)
	p.value.Store(value)
	return p
}

// Watch watches changes to the value of the specified key
func (p *Provider) Watch(ctx context.Context) *Provider {
	Watch(ctx, p.key, func(value types.Value) {
		p.value.Store(value)
	})
	return p
}

// Provide value of the specified key
func (p *Provider) Provide() types.Value {
	if value := p.value.Load(); value != nil {
		return value.(types.Value)
	}
	return types.NewNilValue()
}
