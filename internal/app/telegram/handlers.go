package telegram

import (
  "context"
  "errors"
  "fmt"
  "strings"

  telegram "github.com/go-telegram/bot"
  tgmodels "github.com/go-telegram/bot/models"
  "github.com/samber/lo"
  log "github.com/sirupsen/logrus"
  "github.com/ushakovn/outfit/internal/app/tracker"
  "github.com/ushakovn/outfit/internal/models"
)

func (b *Transport) handleStartMenu(ctx context.Context, bot *telegram.Bot, update *tgmodels.Update) {
  chatId, ok := findChatIdInUpdate(update)
  if !ok {
    log.
      WithField("update.message", update.Message).
      WithField("menu", models.StartMenu).
      Warn("chat_id not found")

    return
  }

  reply := newReplyKeyboard(models.StartMenu).
    Row().Button("–î–æ–±–∞–≤–∏—Ç—å –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ", bot, telegram.MatchTypeExact, b.handleTrackingInsertMenu).
    Row().Button("–ú–æ–∏ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è", bot, telegram.MatchTypeExact, b.handleTrackingListMenu)

  text := `<b>–î–∞–Ω–Ω—ã–π –±–æ—Ç —Å–æ–∑–¥–∞–Ω –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è —Ç–æ–≤–∞—Ä–æ–≤ üëì.</b>

<b>–ë–æ—Ç –æ—Ç—Å—ã–ª–∞–µ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –µ—Å–ª–∏:</b>
  1. –¶–µ–Ω–∞ –Ω–∞ —Ç–æ–≤–∞—Ä –±—ã–ª–∞ —Å–Ω–∏–∂–µ–Ω–∞ –∏–ª–∏ –ø–æ—è–≤–∏–ª–∞—Å—å —Å–∫–∏–¥–∫–∞ –Ω–∞ —Ç–æ–≤–∞—Ä üìâ.
  2. –†–∞—Å–ø—Ä–æ–¥–∞–Ω–Ω—ã–π —Ç–æ–≤–∞—Ä —Å–Ω–æ–≤–∞ –ø–æ—è–≤–∏–ª—Å—è –≤ –Ω–∞–ª–∏—á–∏–µ üì¶.

<b>–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –±–æ—Ç–æ–º –ø—Ä–æ–∏—Å—Ö–æ–¥–∏—Ç —Å –ø–æ–º–æ—â—å—é –≤–∏—Ä—Ç—É–∞–ª—å–Ω–æ–π –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã:</b>
  1. –î–æ–±–∞–≤–∏—Ç—å –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ üì® - –¥–æ–±–∞–≤–ª—è–µ—Ç –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ –ø–æ –≤–∞—à–µ–º—É —Ç–æ–≤–∞—Ä—É.
  2. –ú–æ–∏ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è ‚úâÔ∏è - –≤—ã–≤–æ–¥–∏—Ç —Å–ø–∏—Å–æ–∫ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–µ–º—ã—Ö –≤–∞–º–∏ —Ç–æ–≤–∞—Ä–æ–≤.`

  err := b.sendMessage(ctx, sendMessageParams{
    ChatId: chatId,
    Text:   text,
    Reply:  reply,
  })
  if err != nil {
    log.
      WithField("chat_id", chatId).
      WithField("menu", models.StartMenu).
      Errorf("b.sendMessage: %v", err)

    return
  }

  err = b.upsertSession(ctx, upsertSessionParams{
    ChatId: chatId,
    Menu:   models.StartMenu,
  })
  if err != nil {
    log.
      WithField("chat_id", chatId).
      WithField("menu", models.StartMenu).
      Errorf("b.upsertSession: %v", err)

    return
  }
}

func (b *Transport) handleStartSilentMenu(ctx context.Context, bot *telegram.Bot, update *tgmodels.Update) {
  chatId, ok := findChatIdInUpdate(update)
  if !ok {
    log.
      WithField("update.message", update.Message).
      WithField("menu", models.StartSilentMenu).
      Warn("chat_id not found")

    return
  }

  reply := newReplyKeyboard(models.StartSilentMenu).
    Row().Button("–ü–æ–º–æ—â—å üìÑ", bot, telegram.MatchTypeExact, b.handleStartMenu).
    Row().Button("–î–æ–±–∞–≤–∏—Ç—å –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ üì®", bot, telegram.MatchTypeExact, b.handleTrackingInsertMenu).
    Row().Button("–ú–æ–∏ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è ‚úâÔ∏è", bot, telegram.MatchTypeExact, b.handleTrackingListMenu)

  err := b.sendMessage(ctx, sendMessageParams{
    ChatId: chatId,
    Text:   `–í—ã –≤–µ—Ä–Ω—É–ª–∏—Å—å –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é –±–æ—Ç–∞ üëì.`,
    Reply:  reply,
  })
  if err != nil {
    log.
      WithField("chat_id", chatId).
      WithField("menu", models.StartSilentMenu).
      Errorf("b.sendMessage: %v", err)

    return
  }

  err = b.upsertSession(ctx, upsertSessionParams{
    ChatId: chatId,
    Menu:   models.StartSilentMenu,
  })
  if err != nil {
    log.
      WithField("chat_id", chatId).
      WithField("menu", models.StartSilentMenu).
      Errorf("b.upsertSession: %v", err)

    return
  }
}

func (b *Transport) handleTrackingInsertMenu(ctx context.Context, bot *telegram.Bot, update *tgmodels.Update) {
  chatId, ok := findChatIdInUpdate(update)
  if !ok {
    log.
      WithField("update.message", update.Message).
      WithField("menu", models.TrackingInsertMenu).
      Warn("chat_id not found")

    return
  }

  reply := newReplyKeyboard(models.TrackingInsertMenu).
    Row().Button("–ù–∞–∑–∞–¥ üëì", bot, telegram.MatchTypeExact, b.handleStartSilentMenu)

  err := b.sendMessage(ctx, sendMessageParams{
    ChatId: chatId,
    Text:   `–í–≤–µ–¥–∏—Ç–µ —Å—Å—ã–ª–∫—É –Ω–∞ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–µ–º—ã–π —Ç–æ–≤–∞—Ä üì¶.`,
    Reply:  reply,
  })
  if err != nil {
    log.
      WithField("chat_id", chatId).
      WithField("menu", models.TrackingInsertMenu).
      Errorf("b.sendMessage: %v", err)

    return
  }

  err = b.upsertSession(ctx, upsertSessionParams{
    ChatId: chatId,
    Menu:   models.TrackingInsertMenu,
  })
  if err != nil {
    log.
      WithField("chat_id", chatId).
      WithField("menu", models.TrackingInsertMenu).
      Errorf("b.upsertSession: %v", err)

    return
  }
}

func (b *Transport) handleTrackingInputUrlMenu(ctx context.Context, bot *telegram.Bot, update *tgmodels.Update) {
  chatId, ok := findChatIdInUpdate(update)
  if !ok {
    log.
      WithField("update.message", update.Message).
      WithField("menu", models.TrackingInputUrlMenu).
      Warn("chat_id not found")

    return
  }

  reply := newReplyKeyboard(models.TrackingInputUrlMenu).
    Row().Button("–ù–∞–∑–∞–¥ üëì", bot, telegram.MatchTypeExact, b.handleStartSilentMenu)

  parsedUrl, errMessage := parseTrackingInputUrl(update.Message.Text)

  if errMessage != "" {
    err := b.sendMessage(ctx, sendMessageParams{
      ChatId: chatId,
      Text:   errMessage,
      Reply:  reply,
    })
    if err != nil {
      log.
        WithField("chat_id", chatId).
        WithField("menu", models.TrackingInputUrlMenu).
        Errorf("b.sendMessage: %v", err)

      return
    }
  }

  tracking, err := b.findTracking(ctx, chatId, parsedUrl)
  if err != nil {
    log.
      WithField("chat_id", chatId).
      WithField("menu", models.TrackingInputUrlMenu).
      Errorf("b.findTracking: %v", err)

    return
  }

  if tracking != nil {
    err = b.sendMessage(ctx, sendMessageParams{
      ChatId: chatId,
      Text: `–û—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ –ø–æ –¥–∞–Ω–Ω–æ–º—É —Ç–æ–≤–∞—Ä—É —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç üìÑ.
–í—ã –º–æ–∂–µ—Ç–µ —É–¥–∞–ª–∏—Ç—å –µ–≥–æ –∏ —Å–æ–∑–¥–∞—Ç—å –Ω–æ–≤–æ–µ —Å –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–º–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏ üòâ.`,
      Reply: reply,
    })
    if err != nil {
      log.
        WithField("chat_id", chatId).
        WithField("menu", models.TrackingInputUrlMenu).
        Errorf("b.sendMessage: %v", err)
    }
    return
  }

  if err = b.checkProductURL(parsedUrl); err != nil {
    if errors.Is(err, tracker.ErrUnsupportedProductType) {
      err = b.sendMessage(ctx, sendMessageParams{
        ChatId: chatId,
        Text:   `–ò–∑–≤–∏–Ω–∏—Ç–µ, –±–æ—Ç –ø–æ–∫–∞ –Ω–µ —É–º–µ–µ—Ç —Ä–∞–±–æ—Ç–∞—Ç—å —Å –¥–∞–Ω–Ω—ã–º —Å–∞–π—Ç–æ–º üòü.`,
        Reply:  reply,
      })
      if err != nil {
        log.
          WithField("chat_id", chatId).
          WithField("menu", models.TrackingInputUrlMenu).
          Errorf("b.sendMessage: %v", err)
      }
      return
    }

    log.
      WithField("chat_id", chatId).
      WithField("menu", models.TrackingInputUrlMenu).
      Errorf("checkProductURL: %v", err)

    return
  }

  err = b.sendMessage(ctx, sendMessageParams{
    ChatId: chatId,
    Text:   `–°–µ–π—á–∞—Å –±–æ—Ç –ø—Ä–æ–≤–µ—Ä–∏—Ç –∫–∞—Ä—Ç–æ—á–∫—É —Ç–æ–≤–∞—Ä–∞ –∏ –≤–µ—Ä–Ω–µ—Ç—Å—è —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–º üí¨.`,
    Reply:  reply,
  })
  if err != nil {
    log.
      WithField("chat_id", chatId).
      WithField("menu", models.TrackingInputUrlMenu).
      Errorf("b.sendMessage: %v", err)

    return
  }

  message, err := b.createMessage(ctx, parsedUrl)
  if err != nil {
    log.
      WithField("chat_id", chatId).
      WithField("menu", models.TrackingInputUrlMenu).
      Errorf("b.createMessage: %v", err)

    return
  }

  err = b.sendMessage(ctx, sendMessageParams{
    ChatId: chatId,
    Text:   message.Text.Value,
    Reply:  reply,
  })
  if err != nil {
    log.
      WithField("chat_id", chatId).
      WithField("menu", models.TrackingInputUrlMenu).
      Errorf("b.sendMessage: %v", err)

    return
  }

  sizesValues := lo.Map(message.Product.Options, func(option models.ProductOption, _ int) string {
    return option.Size.Brand.String()
  })
  sizesCount := len(message.Product.Options)

  if sizesCount <= 1 {
    reply = newReplyKeyboard(models.TrackingInputUrlMenu).
      Row().Button("–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å üì®", bot, telegram.MatchTypeExact, b.handleTrackingInsertConfirmMenu).
      Row().Button("–ù–∞–∑–∞–¥ üëì", bot, telegram.MatchTypeExact, b.handleStartSilentMenu)

    err = b.sendMessage(ctx, sendMessageParams{
      ChatId: chatId,
      Text: `<b>–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø–æ–ª—É—á–µ–Ω–Ω—ã–µ –æ—Ç –±–æ—Ç–∞ –¥–∞–Ω–Ω—ã–µ üì¶:</b>
  - –ï—Å–ª–∏ –≤—Å–µ —Ö–æ—Ä–æ—à–æ, –ø–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ –Ω–∞–∂–∞–≤ "–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å üì®".
  - –ï—Å–ª–∏ –≤—ã –ø–µ—Ä–µ–¥—É–º–∞–ª–∏ –∏–ª–∏ —Ö–æ—Ç–∏—Ç–µ –≤–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é, –Ω–∞–∂–º–∏—Ç–µ "–ù–∞–∑–∞–¥ üëì".`,
      Reply: reply,
    })
    if err != nil {
      log.
        WithField("chat_id", chatId).
        WithField("menu", models.TrackingInputUrlMenu).
        Errorf("b.sendMessage: %v", err)
    }
    return
  }

  err = b.sendMessage(ctx, sendMessageParams{
    ChatId: chatId,
    Text: `<b>–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø–æ–ª—É—á–µ–Ω–Ω—ã–µ –æ—Ç –±–æ—Ç–∞ –¥–∞–Ω–Ω—ã–µ üì¶:</b>
  - –ï—Å–ª–∏ –≤—Å–µ —Ö–æ—Ä–æ—à–æ, –≤—ã–±–µ—Ä–∏—Ç–µ –ø–æ–¥—Ö–æ–¥—è—â–∏–µ —Ä–∞–∑–º–µ—Ä—ã –∏–∑ —Å–ø–∏—Å–∫–∞ –Ω–∏–∂–µ üòâ.
  - –ï—Å–ª–∏ –≤—ã –ø–µ—Ä–µ–¥—É–º–∞–ª–∏ –∏–ª–∏ —Ö–æ—Ç–∏—Ç–µ –≤–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é, –Ω–∞–∂–º–∏—Ç–µ "–ù–∞–∑–∞–¥ üëì".`,
    Reply: reply,
  })
  if err != nil {
    log.
      WithField("chat_id", chatId).
      WithField("menu", models.TrackingInputUrlMenu).
      Errorf("b.sendMessage: %v", err)

    return
  }

  text := "<b>–î–æ—Å—Ç—É–ø–Ω—ã–µ —Ä–∞–∑–º–µ—Ä—ã üìã:</b>\n"

  for index, label := range sizesValues {
    text += fmt.Sprintf("%d. %s", index+1, label)

    if index != len(sizesValues)-1 {
      text += "\n"
    }
  }
  text = strings.TrimSpace(text)

  text += `
–†–∞–∑–º–µ—Ä—ã –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –≤–≤–æ–¥–∏—Ç—å —á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é, –≤ —Ç–æ—á–Ω–æ—Å—Ç–∏ —Ç–∞–∫, –∫–∞–∫ —É–∫–∞–∑–∞–Ω–æ –≤ —Å–ø–∏—Å–∫–µ üìã.
–ö—Å—Ç–∞—Ç–∏, –≤—ã –º–æ–∂–µ—Ç–µ –≤–≤–µ—Å—Ç–∏ —Ä–∞–∑–º–µ—Ä, –∫–æ—Ç–æ—Ä–æ–≥–æ –Ω–µ—Ç –≤ —Å–ø–∏—Å–∫–µ, –µ—Å–ª–∏ —Ç–æ—á–Ω–æ –∑–Ω–∞–µ—Ç–µ, —á—Ç–æ —Ç–∞–∫–æ–π —Å—É—â–µ—Å—Ç–≤—É–µ—Ç üòâ.`

  err = b.sendMessage(ctx, sendMessageParams{
    ChatId: chatId,
    Text:   text,
    Reply:  reply,
  })
  if err != nil {
    log.
      WithField("chat_id", chatId).
      WithField("menu", models.TrackingInputUrlMenu).
      Errorf("b.sendMessage: %v", err)

    return
  }

  err = b.upsertSession(ctx, upsertSessionParams{
    ChatId: chatId,
    Menu:   models.TrackingInputUrlMenu,
    Tracking: &models.Tracking{
      ChatId:        chatId,
      URL:           parsedUrl,
      ParsedProduct: message.Product,
    },
  })
  if err != nil {
    log.
      WithField("chat_id", chatId).
      WithField("menu", models.TrackingInputUrlMenu).
      Errorf("b.upsertSession: %v", err)

    return
  }
}

func (b *Transport) handleTrackingInputSizesMenu(ctx context.Context, bot *telegram.Bot, update *tgmodels.Update) {
  chatId, ok := findChatIdInUpdate(update)
  if !ok {
    log.
      WithField("update.message", update.Message).
      WithField("menu", models.TrackingInputSizesMenu).
      Warn("chat_id not found")

    return
  }

  session, err := b.findSession(ctx, chatId)
  if err != nil {
    log.
      WithField("chat_id", chatId).
      WithField("menu", models.TrackingInputSizesMenu).
      Errorf("b.findSession: %v", err)

    return
  }

  reply := newReplyKeyboard(models.TrackingInputSizesMenu).
    Row().Button("–ù–∞–∑–∞–¥ üëì", bot, telegram.MatchTypeExact, b.handleStartSilentMenu)

  sizesValues, errMessage := parseTrackingInputSizes(update.Message.Text)

  if errMessage != "" {
    err = b.sendMessage(ctx, sendMessageParams{
      ChatId: chatId,
      Text:   errMessage,
      Reply:  reply,
    })
    if err != nil {
      log.
        WithField("chat_id", chatId).
        WithField("menu", models.TrackingInputSizesMenu).
        Errorf("b.sendMessage: %v", err)

      return
    }
  }

  session.Tracking.Sizes = models.ParseSizesParams{
    Values: sizesValues,
  }

  err = b.upsertSession(ctx, upsertSessionParams{
    ChatId:   chatId,
    Menu:     models.TrackingInputSizesMenu,
    Tracking: session.Tracking,
  })
  if err != nil {
    log.
      WithField("chat_id", chatId).
      WithField("menu", models.TrackingInputSizesMenu).
      Errorf("b.upsertSession: %v", err)

    return
  }

  reply = newReplyKeyboard(models.TrackingInputSizesMenu).
    Row().Button("–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å üì®", bot, telegram.MatchTypeExact, b.handleTrackingInsertConfirmMenu).
    Row().Button("–ù–∞–∑–∞–¥ üëì", bot, telegram.MatchTypeExact, b.handleStartSilentMenu)

  text := `<b>–ú—ã –∑–∞—Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–ª–∏ –≤–≤–µ–¥–µ–Ω–Ω—ã–µ —Ä–∞–∑–º–µ—Ä—ã: ü´°</b>
`

  for index, label := range sizesValues {
    text += fmt.Sprintf("%d. %s", index+1, label)

    if index != len(sizesValues)-1 {
      text += "\n"
    }
  }
  text = strings.TrimSpace(text)

  text += `
–î–∞–ª–µ–µ:
  - –ï—Å–ª–∏ –≤—Å–µ —Ö–æ—Ä–æ—à–æ, –ø–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ –Ω–∞–∂–∞–≤ "–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å üì®"
  - –ï—Å–ª–∏ –≤—ã –ø–µ—Ä–µ–¥—É–º–∞–ª–∏ –∏–ª–∏ —Ö–æ—Ç–∏—Ç–µ –≤–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é, –Ω–∞–∂–º–∏—Ç–µ "–ù–∞–∑–∞–¥ üëì"`

  err = b.sendMessage(ctx, sendMessageParams{
    ChatId: chatId,
    Text:   text,
    Reply:  reply,
  })
  if err != nil {
    log.
      WithField("chat_id", chatId).
      WithField("menu", models.TrackingInputSizesMenu).
      Errorf("b.sendMessage: %v", err)

    return
  }
}

func (b *Transport) handleTrackingInsertConfirmMenu(ctx context.Context, bot *telegram.Bot, update *tgmodels.Update) {
  chatId, ok := findChatIdInUpdate(update)
  if !ok {
    log.
      WithField("update.message", update.Message).
      WithField("menu", models.TrackingInsertConfirmMenu).
      Warn("chat_id not found")

    return
  }

  session, err := b.findSession(ctx, chatId)
  if err != nil {
    log.
      WithField("chat_id", chatId).
      WithField("menu", models.TrackingInsertConfirmMenu).
      Errorf("b.findSession: %v", err)

    return
  }

  if session.Tracking == nil {
    log.
      WithField("chat_id", chatId).
      WithField("menu", models.TrackingInsertConfirmMenu).
      WithField("session.tracking", session.Tracking).
      Warn("message skipped")

    return
  }

  err = b.insertTracking(ctx, *session.Tracking)
  if err != nil {
    log.
      WithField("chat_id", chatId).
      WithField("menu", models.TrackingInsertConfirmMenu).
      Errorf("b.insertTracking: %v", err)

    return
  }

  reply := newReplyKeyboard(models.TrackingInsertConfirmMenu).
    Row().Button("–ü–æ–º–æ—â—å üìÑ", bot, telegram.MatchTypeExact, b.handleStartMenu).
    Row().Button("–î–æ–±–∞–≤–∏—Ç—å –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ üì®", bot, telegram.MatchTypeExact, b.handleTrackingInsertMenu).
    Row().Button("–ú–æ–∏ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è ‚úâÔ∏è", bot, telegram.MatchTypeExact, b.handleTrackingListMenu)

  err = b.sendMessage(ctx, sendMessageParams{
    ChatId: chatId,
    Text: `–û—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ –¥–ª—è —Ç–æ–≤–∞—Ä–∞ —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω–æ üòâ.
–ú—ã –ø—Ä–∏—à–ª–µ–º –≤–∞–º —Å–æ–æ–±—â–µ–Ω–∏–µ, –∫–∞–∫ —Ç–æ–ª—å–∫–æ –ø–æ–ª—É—á–∏–º –Ω–æ–≤–æ—Å—Ç–∏ –ø–æ —Ç–æ–≤–∞—Ä—É üì¶!`,
    Reply: reply,
  })
  if err != nil {
    log.
      WithField("chat_id", chatId).
      WithField("menu", models.TrackingInsertConfirmMenu).
      Errorf("b.sendMessage: %v", err)

    return
  }

  err = b.upsertSession(ctx, upsertSessionParams{
    ChatId: chatId,
    Menu:   models.TrackingInsertConfirmMenu,
  })
  if err != nil {
    log.
      WithField("chat_id", chatId).
      WithField("menu", models.TrackingInsertConfirmMenu).
      Errorf("b.upsertSession: %v", err)

    return
  }
}

func (b *Transport) handleTrackingListMenu(ctx context.Context, bot *telegram.Bot, update *tgmodels.Update) {
  chatId, ok := findChatIdInUpdate(update)
  if !ok {
    log.
      WithField("update.message", update.Message).
      WithField("menu", models.TrackingListMenu).
      Warn("chat_id not found")

    return
  }

  list, err := b.listTrackings(ctx, chatId)
  if err != nil {
    log.
      WithField("chat_id", chatId).
      WithField("menu", models.TrackingListMenu).
      Errorf("b.listTrackings: %v", err)

    return
  }

  for index, tracking := range list {
    key := chatSelectedTracking{
      ChatId: chatId,
      Index:  index,
    }
    b.deps.cache.TrackingURLs[key] = tracking.URL
  }

  if len(list) > 0 {
    slider := b.newTrackingSlider(trackingSliderParams{
      ChatId:    chatId,
      Bot:       bot,
      Trackings: list,
    })

    if _, err = slider.Show(ctx, bot, chatId); err != nil {
      log.
        WithField("chat_id", chatId).
        WithField("menu", models.TrackingListMenu).
        Errorf("telegram.Slider.Show: %v", err)

      return
    }
  } else {
    reply := newReplyKeyboard(models.TrackingListMenu).
      Row().Button("–ü–æ–º–æ—â—å üìÑ", bot, telegram.MatchTypeExact, b.handleStartMenu).
      Row().Button("–î–æ–±–∞–≤–∏—Ç—å –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ üì®", bot, telegram.MatchTypeExact, b.handleTrackingInsertMenu).
      Row().Button("–ú–æ–∏ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è ‚úâÔ∏è", bot, telegram.MatchTypeExact, b.handleTrackingListMenu)

    err = b.sendMessage(ctx, sendMessageParams{
      ChatId: chatId,
      Text:   `–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–π ü•∏.`,
      Reply:  reply,
    })
    if err != nil {
      log.
        WithField("chat_id", chatId).
        WithField("menu", models.TrackingListMenu).
        Errorf("b.sendMessage: %v", err)

      return
    }
  }

  err = b.upsertSession(ctx, upsertSessionParams{
    ChatId: chatId,
    Menu:   models.TrackingListMenu,
  })
  if err != nil {
    log.
      WithField("chat_id", chatId).
      WithField("menu", models.TrackingListMenu).
      Errorf("b.upsertSession: %v", err)

    return
  }
}

func (b *Transport) handleTrackingDeleteMenu(ctx context.Context, bot *telegram.Bot, message tgmodels.MaybeInaccessibleMessage, index int) {
  chatId, ok := findChatIdInMaybeInaccessible(message)
  if !ok {
    log.
      WithField("inaccessible_message", message).
      WithField("menu", models.TrackingDeleteMenu).
      Warn("chat_id not found")

    return
  }

  url, ok := b.deps.cache.TrackingURLs[chatSelectedTracking{
    ChatId: chatId,
    Index:  index,
  }]
  if !ok {
    log.
      WithField("chat_id", chatId).
      WithField("menu", models.TrackingDeleteMenu).
      WithField("tracking_index", index).
      Errorf("tracking url not found in Cache")

    return
  }

  tracking, err := b.findTracking(ctx, chatId, url)
  if err != nil {
    log.
      WithField("chat_id", chatId).
      WithField("menu", models.TrackingDeleteMenu).
      Errorf("b.findTracking: %v", err)

    return
  }

  reply := newReplyKeyboard(models.TrackingDeleteMenu).
    Row().Button("–î–∞ üôÇ‚Äç‚ÜïÔ∏è", bot, telegram.MatchTypeExact, b.handleTrackingDeleteConfirmMenu).
    Row().Button("–ù–∞–∑–∞–¥ üôÇ‚Äç‚ÜîÔ∏è", bot, telegram.MatchTypeExact, b.handleTrackingListMenu)

  err = b.sendMessage(ctx, sendMessageParams{
    ChatId: chatId,
    Text:   `–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ üóëÔ∏è?`,
    Reply:  reply,
  })
  if err != nil {
    log.
      WithField("chat_id", chatId).
      WithField("menu", models.TrackingDeleteMenu).
      Errorf("b.sendMessage: %v", err)

    return
  }

  err = b.upsertSession(ctx, upsertSessionParams{
    ChatId:   chatId,
    Menu:     models.TrackingDeleteMenu,
    Tracking: tracking,
  })
  if err != nil {
    log.
      WithField("chat_id", chatId).
      WithField("menu", models.TrackingDeleteMenu).
      Errorf("b.upsertSession: %v", err)

    return
  }
}

func (b *Transport) handleTrackingSilentMenu(ctx context.Context, bot *telegram.Bot, message tgmodels.MaybeInaccessibleMessage) {
  chatId, ok := findChatIdInMaybeInaccessible(message)
  if !ok {
    log.
      WithField("inaccessible_message", message).
      WithField("menu", models.StartSilentMenu).
      Warn("chat_id not found")

    return
  }

  reply := newReplyKeyboard(models.StartSilentMenu).
    Row().Button("–ü–æ–º–æ—â—å üìÑ", bot, telegram.MatchTypeExact, b.handleStartMenu).
    Row().Button("–î–æ–±–∞–≤–∏—Ç—å –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ üì®", bot, telegram.MatchTypeExact, b.handleTrackingInsertMenu).
    Row().Button("–ú–æ–∏ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è ‚úâÔ∏è", bot, telegram.MatchTypeExact, b.handleTrackingListMenu)

  err := b.sendMessage(ctx, sendMessageParams{
    ChatId: chatId,
    Text:   `–í—ã –≤–µ—Ä–Ω—É–ª–∏—Å—å –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é –±–æ—Ç–∞ üëì.`,
    Reply:  reply,
  })
  if err != nil {
    log.
      WithField("chat_id", chatId).
      WithField("menu", models.StartSilentMenu).
      Errorf("b.sendMessage: %v", err)

    return
  }

  err = b.upsertSession(ctx, upsertSessionParams{
    ChatId: chatId,
    Menu:   models.StartSilentMenu,
  })
  if err != nil {
    log.
      WithField("chat_id", chatId).
      WithField("menu", models.StartSilentMenu).
      Errorf("b.upsertSession: %v", err)

    return
  }
}

func (b *Transport) handleTrackingDeleteConfirmMenu(ctx context.Context, bot *telegram.Bot, update *tgmodels.Update) {
  chatId, ok := findChatIdInUpdate(update)
  if !ok {
    log.
      WithField("update.message", update.Message).
      WithField("menu", models.TrackingDeleteConfirmMenu).
      Warn("chat_id not found")

    return
  }

  session, err := b.findSession(ctx, chatId)
  if err != nil {
    log.
      WithField("chat_id", chatId).
      WithField("menu", models.TrackingDeleteConfirmMenu).
      Errorf("b.findSession: %v", err)

    return
  }

  err = b.deleteTracking(ctx, session)
  if err != nil {
    log.
      WithField("chat_id", chatId).
      WithField("menu", models.TrackingDeleteConfirmMenu).
      Errorf("b.deleteTracking: %v", err)

    return
  }

  reply := newReplyKeyboard(models.TrackingDeleteConfirmMenu).
    Row().Button("–ü–æ–º–æ—â—å üìÑ", bot, telegram.MatchTypeExact, b.handleStartMenu).
    Row().Button("–î–æ–±–∞–≤–∏—Ç—å –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ üì®", bot, telegram.MatchTypeExact, b.handleTrackingInsertMenu).
    Row().Button("–ú–æ–∏ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è ‚úâÔ∏è", bot, telegram.MatchTypeExact, b.handleTrackingListMenu)

  err = b.sendMessage(ctx, sendMessageParams{
    ChatId: chatId,
    Text:   `–û—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω–æ ü•∏!`,
    Reply:  reply,
  })
  if err != nil {
    log.
      WithField("chat_id", chatId).
      WithField("menu", models.TrackingDeleteConfirmMenu).
      Errorf("b.sendMessage: %v", err)

    return
  }

  err = b.upsertSession(ctx, upsertSessionParams{
    ChatId: chatId,
    Menu:   models.TrackingDeleteConfirmMenu,
  })
  if err != nil {
    log.
      WithField("chat_id", chatId).
      WithField("menu", models.TrackingDeleteConfirmMenu).
      Errorf("b.upsertSession: %v", err)

    return
  }
}
