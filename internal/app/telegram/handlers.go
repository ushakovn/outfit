package telegram

import (
  "context"
  "errors"
  "strings"
  "time"

  telegram "github.com/go-telegram/bot"
  tgmodels "github.com/go-telegram/bot/models"
  log "github.com/sirupsen/logrus"
  "github.com/ushakovn/outfit/internal/app/tracker"
  "github.com/ushakovn/outfit/internal/models"
)

func (b *Transport) handleStartMenu(ctx context.Context, bot *telegram.Bot, update *tgmodels.Update) {
  chatId, ok := findChatIdInUpdate(update)
  if !ok {
    log.
      WithField("update.message", update.Message).
      WithField("menu", models.StartMenu).
      Warn("chat_id not found")

    return
  }

  reply := newReplyKeyboard(models.StartMenu).
    Row().Button("–ú–æ–∏ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è ‚úâÔ∏è", bot, telegram.MatchTypeExact, b.handleTrackingMyMenu).
    Row().Button("–î–æ–±–∞–≤–∏—Ç—å –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ üì®", bot, telegram.MatchTypeExact, b.handleTrackingInsertMenu).
    Row().Button("–ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–µ –º–∞–≥–∞–∑–∏–Ω—ã üëú", bot, telegram.MatchTypeExact, b.handleShopList).
    Row().Button("–û–±—Ä–∞—Ç–Ω–∞—è —Å–≤—è–∑—å üìß", bot, telegram.MatchTypeExact, b.handleInsertIssueMenu)

  text := `<b>–ë–æ—Ç —Å–æ–∑–¥–∞–Ω –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è —Ç–æ–≤–∞—Ä–æ–≤ üí¨</b>

<b>–û–Ω –æ—Ç—Å—ã–ª–∞–µ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è, –∫–æ–≥–¥–∞:</b>
1. –¶–µ–Ω–∞ –Ω–∞ —Ç–æ–≤–∞—Ä –±—ã–ª–∞ —Å–Ω–∏–∂–µ–Ω–∞ –∏–ª–∏ –ø–æ—è–≤–∏–ª–∞—Å—å —Å–∫–∏–¥–∫–∞ –Ω–∞ —Ç–æ–≤–∞—Ä üìâ
2. –†–∞—Å–ø—Ä–æ–¥–∞–Ω–Ω—ã–π —Ç–æ–≤–∞—Ä —Å–Ω–æ–≤–∞ –ø–æ—è–≤–∏–ª—Å—è –≤ –Ω–∞–ª–∏—á–∏–∏ üì¶

<b>–û–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ, –±–æ—Ç –º–æ–∂–µ—Ç –æ—Ç—Å—ã–ª–∞—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è, –∫–æ–≥–¥–∞</b>:
1. –¶–µ–Ω–∞ –Ω–∞ —Ç–æ–≤–∞—Ä –≤–æ–∑—Ä–æ—Å–ª–∞ üìà
2. –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç–æ–≤–∞—Ä–∞ —Å–æ–∫—Ä–∞—Ç–∏–ª–æ—Å—å üì¶

<b>–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –±–æ—Ç–æ–º –ø—Ä–æ–∏—Å—Ö–æ–¥–∏—Ç —Å –ø–æ–º–æ—â—å—é –≤–∏—Ä—Ç—É–∞–ª—å–Ω–æ–π –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã üí°</b>`

  err := b.sendMessage(ctx, sendMessageParams{
    ChatId: chatId,
    Text:   text,
    Reply:  reply,
  })
  if err != nil {
    log.
      WithField("chat_id", chatId).
      WithField("menu", models.StartMenu).
      Errorf("b.sendMessage: %v", err)

    return
  }

  err = b.upsertSession(ctx, upsertSessionParams{
    ChatId: chatId,
    Menu:   models.StartMenu,
  })
  if err != nil {
    log.
      WithField("chat_id", chatId).
      WithField("menu", models.StartMenu).
      Errorf("b.upsertSession: %v", err)

    return
  }
}

func (b *Transport) handleStartSilentMenu(ctx context.Context, bot *telegram.Bot, update *tgmodels.Update) {
  chatId, ok := findChatIdInUpdate(update)
  if !ok {
    log.
      WithField("update.message", update.Message).
      WithField("menu", models.StartSilentMenu).
      Warn("chat_id not found")

    return
  }

  reply := newReplyKeyboard(models.StartSilentMenu).
    Row().Button("–ü–æ–º–æ—â—å üí°", bot, telegram.MatchTypeExact, b.handleStartMenu).
    Row().Button("–ú–æ–∏ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è ‚úâÔ∏è", bot, telegram.MatchTypeExact, b.handleTrackingMyMenu).
    Row().Button("–î–æ–±–∞–≤–∏—Ç—å –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ üì®", bot, telegram.MatchTypeExact, b.handleTrackingInsertMenu)

  err := b.sendMessage(ctx, sendMessageParams{
    ChatId: chatId,
    Text:   `–í—ã –≤–µ—Ä–Ω—É–ª–∏—Å—å –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é –±–æ—Ç–∞ üí¨`,
    Reply:  reply,
  })
  if err != nil {
    log.
      WithField("chat_id", chatId).
      WithField("menu", models.StartSilentMenu).
      Errorf("b.sendMessage: %v", err)

    return
  }

  err = b.upsertSession(ctx, upsertSessionParams{
    ChatId: chatId,
    Menu:   models.StartSilentMenu,
  })
  if err != nil {
    log.
      WithField("chat_id", chatId).
      WithField("menu", models.StartSilentMenu).
      Errorf("b.upsertSession: %v", err)

    return
  }
}

func (b *Transport) handleTrackingInsertMenu(ctx context.Context, bot *telegram.Bot, update *tgmodels.Update) {
  chatId, ok := findChatIdInUpdate(update)
  if !ok {
    log.
      WithField("update.message", update.Message).
      WithField("menu", models.TrackingInsertMenu).
      Warn("chat_id not found")

    return
  }

  reply := newReplyKeyboard(models.TrackingInsertMenu).
    Row().Button("–ù–∞–∑–∞–¥", bot, telegram.MatchTypeExact, b.handleStartSilentMenu)

  err := b.sendMessage(ctx, sendMessageParams{
    ChatId: chatId,
    Text:   `–í–≤–µ–¥–∏—Ç–µ —Å—Å—ã–ª–∫—É –Ω–∞ —Ç–æ–≤–∞—Ä üì¶`,
    Reply:  reply,
  })
  if err != nil {
    log.
      WithField("chat_id", chatId).
      WithField("menu", models.TrackingInsertMenu).
      Errorf("b.sendMessage: %v", err)

    return
  }

  err = b.upsertSession(ctx, upsertSessionParams{
    ChatId: chatId,
    Menu:   models.TrackingInsertMenu,
  })
  if err != nil {
    log.
      WithField("chat_id", chatId).
      WithField("menu", models.TrackingInsertMenu).
      Errorf("b.upsertSession: %v", err)

    return
  }
}

func (b *Transport) handleTrackingInputUrlMenu(ctx context.Context, bot *telegram.Bot, update *tgmodels.Update) {
  chatId, ok := findChatIdInUpdate(update)
  if !ok {
    log.
      WithField("update.message", update.Message).
      WithField("menu", models.TrackingInputUrlMenu).
      Warn("chat_id not found")

    return
  }

  reply := newReplyKeyboard(models.TrackingInputUrlMenu).
    Row().Button("–ù–∞–∑–∞–¥", bot, telegram.MatchTypeExact, b.handleStartSilentMenu)

  parsedUrl, errMessage := parseTrackingURL(update.Message.Text)

  if errMessage != "" {
    err := b.sendMessage(ctx, sendMessageParams{
      ChatId: chatId,
      Text:   errMessage,
      Reply:  reply,
    })
    if err != nil {
      log.
        WithField("chat_id", chatId).
        WithField("menu", models.TrackingInputUrlMenu).
        Errorf("b.sendMessage: %v", err)
    }
    return
  }

  tracking, err := b.findTracking(ctx, chatId, parsedUrl)
  if err != nil {
    log.
      WithField("chat_id", chatId).
      WithField("menu", models.TrackingInputUrlMenu).
      Errorf("b.findTracking: %v", err)

    return
  }

  if tracking != nil {
    err = b.sendMessage(ctx, sendMessageParams{
      ChatId: chatId,
      Text: `–û—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ –ø–æ –¥–∞–Ω–Ω–æ–º—É —Ç–æ–≤–∞—Ä—É —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç ‚úâÔ∏è
–í—ã –º–æ–∂–µ—Ç–µ —É–¥–∞–ª–∏—Ç—å –µ–≥–æ –∏ —Å–æ–∑–¥–∞—Ç—å –Ω–æ–≤–æ–µ —Å –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–º–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏ üòâ`,
      Reply: reply,
    })
    if err != nil {
      log.
        WithField("chat_id", chatId).
        WithField("menu", models.TrackingInputUrlMenu).
        Errorf("b.sendMessage: %v", err)
    }
    return
  }

  if err = b.checkProductURL(parsedUrl); err != nil {
    if errors.Is(err, tracker.ErrUnsupportedProductType) {
      err = b.sendMessage(ctx, sendMessageParams{
        ChatId: chatId,
        Text:   `–ò–∑–≤–∏–Ω–∏—Ç–µ, –±–æ—Ç –ø–æ–∫–∞ –Ω–µ —É–º–µ–µ—Ç —Ä–∞–±–æ—Ç–∞—Ç—å —Å –¥–∞–Ω–Ω—ã–º —Å–∞–π—Ç–æ–º üòü`,
        Reply:  reply,
      })
      if err != nil {
        log.
          WithField("chat_id", chatId).
          WithField("menu", models.TrackingInputUrlMenu).
          Errorf("b.sendMessage: %v", err)
      }
      return
    }

    log.
      WithField("chat_id", chatId).
      WithField("menu", models.TrackingInputUrlMenu).
      Errorf("checkProductURL: %v", err)

    return
  }

  err = b.sendMessage(ctx, sendMessageParams{
    ChatId: chatId,
    Text:   `–°–µ–π—á–∞—Å –±–æ—Ç –ø—Ä–æ–≤–µ—Ä–∏—Ç –∫–∞—Ä—Ç–æ—á–∫—É —Ç–æ–≤–∞—Ä–∞ –∏ –≤–µ—Ä–Ω–µ—Ç—Å—è üí¨`,
    Reply:  reply,
  })
  if err != nil {
    log.
      WithField("chat_id", chatId).
      WithField("menu", models.TrackingInputUrlMenu).
      Errorf("b.sendMessage: %v", err)

    return
  }

  message, err := b.createMessage(ctx, parsedUrl)
  if err != nil {
    log.
      WithField("chat_id", chatId).
      WithField("menu", models.TrackingInputUrlMenu).
      Errorf("b.createMessage: %v", err)

    b.sendErrorMessage(ctx, sendErrorMessageParams{
      ChatId: chatId,
      Text: `<b>–ë–æ—Ç –Ω–µ —Å–º–æ–≥ –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ üòü</b>

–£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ —Å—Ç—Ä–∞–Ω–∏—Ü–∞ —Ç–æ—á–Ω–æ —É–∫–∞–∑—ã–≤–∞–µ—Ç –Ω–∞ –∫–∞—Ä—Ç–æ—á–∫—É —Ç–æ–≤–∞—Ä–∞
–ï—Å–ª–∏ –≤—Å–µ –≤–µ—Ä–Ω–æ, –∏ –æ—à–∏–±–∫–∞ –ø–æ–≤—Ç–æ—Ä–∏—Ç—Å—è —Å–Ω–æ–≤–∞, –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É üë®‚Äçüíª
`,
      Menu: models.TrackingInputUrlMenu,
    })

    return
  }

  err = b.sendMessage(ctx, sendMessageParams{
    ChatId: chatId,
    Text:   message.Text.Value,
    Reply:  reply,
  })
  if err != nil {
    log.
      WithField("chat_id", chatId).
      WithField("menu", models.TrackingInputUrlMenu).
      Errorf("b.sendMessage: %v", err)

    return
  }

  sizesValues := makeProductSizes(message.Product)
  sizesCount := len(sizesValues)

  // –ï—Å–ª–∏ —Ç–æ–≤–∞—Ä –∏–º–µ–µ—Ç one size —Ä–∞–∑–º–µ—Ä.
  if sizesCount <= 1 {
    reply = newReplyKeyboard(models.TrackingInputUrlMenu).
      Row().Button("–î–∞–ª–µ–µ", bot, telegram.MatchTypeExact, b.handleTrackingInputFlagMenu).
      Row().Button("–ù–∞–∑–∞–¥", bot, telegram.MatchTypeExact, b.handleStartSilentMenu)

    err = b.sendMessage(ctx, sendMessageParams{
      ChatId: chatId,
      Text: `<b>–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø–æ–ª—É—á–µ–Ω–Ω—ã–µ –æ—Ç –±–æ—Ç–∞ –¥–∞–Ω–Ω—ã–µ</b>
–ù–∞–∂–º–∏—Ç–µ –¥–∞–ª–µ–µ, –µ—Å–ª–∏ –≤—Å–µ —Ö–æ—Ä–æ—à–æ üòâ`,
      Reply: reply,
    })
    if err != nil {
      log.
        WithField("chat_id", chatId).
        WithField("menu", models.TrackingInputUrlMenu).
        Errorf("b.sendMessage: %v", err)
    }

    // –ï—Å–ª–∏ —Ç–æ–≤–∞—Ä –∏–º–µ–µ—Ç –Ω–æ—Ä–º–∞–ª—å–Ω—É—é —Ä–∞–∑–º–µ—Ä–Ω—É—é —Å–µ—Ç–∫—É.
  } else {
    text := `<b>–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø–æ–ª—É—á–µ–Ω–Ω—ã–µ –æ—Ç –±–æ—Ç–∞ –¥–∞–Ω–Ω—ã–µ</b>

–ï—Å–ª–∏ –≤—Å–µ —Ö–æ—Ä–æ—à–æ, –≤—ã–±–µ—Ä–∏—Ç–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ —Ä–∞–∑–º–µ—Ä—ã –∏–∑ —Å–ø–∏—Å–∫–∞ üìã

<b>–î–æ—Å—Ç—É–ø–Ω—ã–µ —Ä–∞–∑–º–µ—Ä—ã üìã:</b> 
`
    sizesString := strings.Join(sizesValues, ", ")
    text += strings.TrimSpace(sizesString)

    text += `

–†–∞–∑–º–µ—Ä—ã –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –≤–≤–æ–¥–∏—Ç—å —á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é, –≤ —Ç–æ—á–Ω–æ—Å—Ç–∏ —Ç–∞–∫, –∫–∞–∫ —É–∫–∞–∑–∞–Ω–æ –≤ —Å–ø–∏—Å–∫–µ

–ö—Å—Ç–∞—Ç–∏, –≤—ã –º–æ–∂–µ—Ç–µ –≤–≤–µ—Å—Ç–∏ —Ä–∞–∑–º–µ—Ä, –∫–æ—Ç–æ—Ä–æ–≥–æ –Ω–µ—Ç –≤ —Å–ø–∏—Å–∫–µ, –µ—Å–ª–∏ —Ç–æ—á–Ω–æ –∑–Ω–∞–µ—Ç–µ, —á—Ç–æ —Ç–∞–∫–æ–π —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –∏ –º–æ–∂–µ—Ç –ø–æ—è–≤–∏—Ç—å—Å—è –≤ –Ω–∞–ª–∏—á–∏–∏ –Ω–∞ —Å–∞–π—Ç–µ üòâ

<b>–ü—Ä–∏–º–µ—Ä –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–≥–æ –≤–≤–æ–¥–∞ üí¨</b>
`

    text += makeCutSizeValuesString(sizesValues)

    err = b.sendMessage(ctx, sendMessageParams{
      ChatId: chatId,
      Text:   text,
      Reply:  reply,
    })
    if err != nil {
      log.
        WithField("chat_id", chatId).
        WithField("menu", models.TrackingInputUrlMenu).
        Errorf("b.sendMessage: %v", err)

      return
    }
  }

  err = b.upsertSession(ctx, upsertSessionParams{
    ChatId: chatId,
    Menu:   models.TrackingInputUrlMenu,
    Tracking: &models.Tracking{
      ChatId: chatId,
      URL:    parsedUrl,
      Sizes: models.ParseSizesParams{
        Values: sizesValues,
      },
      ParsedProduct: message.Product,
      Timestamps: models.TrackingTimestamps{
        CreatedAt: time.Now(),
      },
    },
  })
  if err != nil {
    log.
      WithField("chat_id", chatId).
      WithField("menu", models.TrackingInputUrlMenu).
      Errorf("b.upsertSession: %v", err)

    return
  }
}

func (b *Transport) handleTrackingInputSizesMenu(ctx context.Context, bot *telegram.Bot, update *tgmodels.Update) {
  chatId, ok := findChatIdInUpdate(update)
  if !ok {
    log.
      WithField("update.message", update.Message).
      WithField("menu", models.TrackingInputSizesMenu).
      Warn("chat_id not found")

    return
  }

  session, err := b.findSession(ctx, chatId)
  if err != nil {
    log.
      WithField("chat_id", chatId).
      WithField("menu", models.TrackingInputSizesMenu).
      Errorf("b.findSession: %v", err)

    return
  }

  reply := newReplyKeyboard(models.TrackingInputSizesMenu).
    Row().Button("–ù–∞–∑–∞–¥", bot, telegram.MatchTypeExact, b.handleStartSilentMenu)

  sizesValues, errMessage := parseTrackingSizes(update.Message.Text, session)

  if errMessage != "" {
    err = b.sendMessage(ctx, sendMessageParams{
      ChatId: chatId,
      Text:   errMessage,
      Reply:  reply,
    })
    if err != nil {
      log.
        WithField("chat_id", chatId).
        WithField("menu", models.TrackingInputSizesMenu).
        Errorf("b.sendMessage: %v", err)
    }
    return
  }

  reply = newReplyKeyboard(models.TrackingInputSizesMenu).
    Row().Button("–î–∞–ª–µ–µ", bot, telegram.MatchTypeExact, b.handleTrackingInputFlagMenu).
    Row().Button("–ù–∞–∑–∞–¥", bot, telegram.MatchTypeExact, b.handleStartSilentMenu)

  err = b.sendMessage(ctx, sendMessageParams{
    ChatId: chatId,
    Text:   makeTrackingSizesText(sizesValues, session),
    Reply:  reply,
  })
  if err != nil {
    log.
      WithField("chat_id", chatId).
      WithField("menu", models.TrackingInputSizesMenu).
      Errorf("b.sendMessage: %v", err)

    return
  }

  setTrackingSizes(session.Tracking, sizesValues)

  err = b.upsertSession(ctx, upsertSessionParams{
    ChatId:   chatId,
    Menu:     models.TrackingInputUrlMenu,
    Tracking: session.Tracking,
  })
  if err != nil {
    log.
      WithField("chat_id", chatId).
      WithField("menu", models.TrackingInputSizesMenu).
      Errorf("b.upsertSession: %v", err)

    return
  }
}

func (b *Transport) handleTrackingInputFlagMenu(ctx context.Context, bot *telegram.Bot, update *tgmodels.Update) {
  chatId, ok := findChatIdInUpdate(update)
  if !ok {
    log.
      WithField("update.message", update.Message).
      WithField("menu", models.TrackingInputFlagMenu).
      Warn("chat_id not found")

    return
  }

  session, err := b.findSession(ctx, chatId)
  if err != nil {
    log.
      WithField("chat_id", chatId).
      WithField("menu", models.TrackingInputFlagMenu).
      Errorf("b.findSession: %v", err)

    return
  }

  reply := newReplyKeyboard(models.TrackingInputFlagMenu).
    Row().Button("–í–∫–ª—é—á–∏—Ç—åÔ∏è", bot, telegram.MatchTypeExact, b.handleTrackingFlagOnMenu).
    Row().Button("–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—åÔ∏è", bot, telegram.MatchTypeExact, b.handleTrackingFlagOffMenu).
    Row().Button("–ù–∞–∑–∞–¥", bot, telegram.MatchTypeExact, b.handleStartSilentMenu)

  err = b.sendMessage(ctx, sendMessageParams{
    ChatId: chatId,
    Text: `<b>–ë–æ—Ç –æ—Ç—Å—ã–ª–∞–µ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è, –∫–æ–≥–¥–∞:</b>
1. –¶–µ–Ω–∞ –Ω–∞ —Ç–æ–≤–∞—Ä –±—ã–ª–∞ —Å–Ω–∏–∂–µ–Ω–∞ –∏–ª–∏ –ø–æ—è–≤–∏–ª–∞—Å—å —Å–∫–∏–¥–∫–∞ –Ω–∞ —Ç–æ–≤–∞—Ä üìâ
2. –†–∞—Å–ø—Ä–æ–¥–∞–Ω–Ω—ã–π —Ç–æ–≤–∞—Ä —Å–Ω–æ–≤–∞ –ø–æ—è–≤–∏–ª—Å—è –≤ –Ω–∞–ª–∏—á–∏–∏ üì¶

<b>–û–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ, –±–æ—Ç –º–æ–∂–µ—Ç –æ—Ç—Å—ã–ª–∞—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è, –∫–æ–≥–¥–∞</b>:
1. –¶–µ–Ω–∞ –Ω–∞ —Ç–æ–≤–∞—Ä –≤–æ–∑—Ä–æ—Å–ª–∞ üìà
2. –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç–æ–≤–∞—Ä–∞ —Å–æ–∫—Ä–∞—Ç–∏–ª–æ—Å—å üì¶

–í–∫–ª—é—á–∏—Ç—å –æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è?`,
    Reply: reply,
  })
  if err != nil {
    log.
      WithField("chat_id", chatId).
      WithField("menu", models.TrackingInputFlagMenu).
      Errorf("b.sendMessage: %v", err)

    return
  }

  err = b.upsertSession(ctx, upsertSessionParams{
    ChatId:   chatId,
    Menu:     models.TrackingInputFlagMenu,
    Tracking: session.Tracking,
  })
  if err != nil {
    log.
      WithField("chat_id", chatId).
      WithField("menu", models.TrackingInputFlagMenu).
      Errorf("b.upsertSession: %v", err)

    return
  }
}

func (b *Transport) handleTrackingCommentMenu(ctx context.Context, bot *telegram.Bot, update *tgmodels.Update) {
  chatId, ok := findChatIdInUpdate(update)
  if !ok {
    log.
      WithField("update.message", update.Message).
      WithField("menu", models.TrackingCommentMenu).
      Warn("chat_id not found")

    return
  }

  session, err := b.findSession(ctx, chatId)
  if err != nil {
    log.
      WithField("chat_id", chatId).
      WithField("menu", models.TrackingCommentMenu).
      Errorf("b.findSession: %v", err)

    return
  }

  reply := newReplyKeyboard(models.TrackingCommentMenu).
    Row().Button("–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å üì®", bot, telegram.MatchTypeExact, b.handleTrackingInsertConfirmMenu).
    Row().Button("–ù–∞–∑–∞–¥", bot, telegram.MatchTypeExact, b.handleStartSilentMenu)

  err = b.sendMessage(ctx, sendMessageParams{
    ChatId: chatId,
    Text: `–ü—Ä–∏–º–µ—Ä –≤–≤–æ–¥–∞ üí¨

–ö–µ–ø–∫–∞ Stussy —á–µ—Ä–Ω–∞—è 
#stussy #–∫–µ–ø–∫–∞ #kixbox

–î–ª–∏–Ω–∞ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è –º–æ–∂–µ—Ç –±—ã—Ç—å –¥–æ 100 —Å–∏–º–≤–æ–ª–æ–≤`,
    Reply: reply,
  })
  if err != nil {
    log.
      WithField("chat_id", chatId).
      WithField("menu", models.TrackingCommentMenu).
      Errorf("b.sendMessage: %v", err)
  }

  err = b.upsertSession(ctx, upsertSessionParams{
    ChatId:   chatId,
    Menu:     models.TrackingCommentMenu,
    Tracking: session.Tracking,
  })
  if err != nil {
    log.
      WithField("chat_id", chatId).
      WithField("menu", models.TrackingCommentMenu).
      Errorf("b.upsertSession: %v", err)

    return
  }
}

func (b *Transport) handleTrackingInputCommentMenu(ctx context.Context, bot *telegram.Bot, update *tgmodels.Update) {
  chatId, ok := findChatIdInUpdate(update)
  if !ok {
    log.
      WithField("update.message", update.Message).
      WithField("menu", models.TrackingInputCommentMenu).
      Warn("chat_id not found")

    return
  }

  session, err := b.findSession(ctx, chatId)
  if err != nil {
    log.
      WithField("chat_id", chatId).
      WithField("menu", models.TrackingInputCommentMenu).
      Errorf("b.findSession: %v", err)

    return
  }

  reply := newReplyKeyboard(models.TrackingCommentMenu).
    Row().Button("–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å üì®", bot, telegram.MatchTypeExact, b.handleTrackingInsertConfirmMenu).
    Row().Button("–ù–∞–∑–∞–¥", bot, telegram.MatchTypeExact, b.handleStartSilentMenu)

  parsedComment, errMessage := parseTrackingComment(update.Message.Text)

  if errMessage != "" {
    err = b.sendMessage(ctx, sendMessageParams{
      ChatId: chatId,
      Text:   errMessage,
      Reply:  reply,
    })
    if err != nil {
      log.
        WithField("chat_id", chatId).
        WithField("menu", models.TrackingInputCommentMenu).
        Errorf("b.sendMessage: %v", err)
    }
    return
  }

  session.Tracking.Comment = parsedComment

  err = b.upsertSession(ctx, upsertSessionParams{
    ChatId:   chatId,
    Menu:     models.TrackingInputCommentMenu,
    Tracking: session.Tracking,
  })
  if err != nil {
    log.
      WithField("chat_id", chatId).
      WithField("menu", models.TrackingInputCommentMenu).
      Errorf("b.upsertSession: %v", err)

    return
  }

  err = b.sendMessage(ctx, sendMessageParams{
    ChatId: chatId,
    Text: `–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω üòâ
–û—Å—Ç–∞–ª–æ—Å—å –ø–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ üì®`,
    Reply: reply,
  })
  if err != nil {
    log.
      WithField("chat_id", chatId).
      WithField("menu", models.TrackingCommentMenu).
      Errorf("b.sendMessage: %v", err)
  }
}

func (b *Transport) handleTrackingFlagOnMenu(ctx context.Context, bot *telegram.Bot, update *tgmodels.Update) {
  chatId, ok := findChatIdInUpdate(update)
  if !ok {
    log.
      WithField("update.message", update.Message).
      WithField("menu", models.TrackingFlagConfirmMenu).
      Warn("chat_id not found")

    return
  }

  session, err := b.findSession(ctx, chatId)
  if err != nil {
    log.
      WithField("chat_id", chatId).
      WithField("menu", models.TrackingFlagConfirmMenu).
      Errorf("b.findSession: %v", err)

    return
  }

  setTrackingFlag(session.Tracking, true)

  err = b.upsertSession(ctx, upsertSessionParams{
    ChatId:   chatId,
    Menu:     models.TrackingFlagConfirmMenu,
    Tracking: session.Tracking,
  })
  if err != nil {
    log.
      WithField("chat_id", chatId).
      WithField("menu", models.TrackingFlagConfirmMenu).
      Errorf("b.upsertSession: %v", err)

    return
  }

  reply := newReplyKeyboard(models.TrackingFlagConfirmMenu).
    Row().Button("–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å üì®", bot, telegram.MatchTypeExact, b.handleTrackingInsertConfirmMenu).
    Row().Button("–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π üí¨", bot, telegram.MatchTypeExact, b.handleTrackingCommentMenu).
    Row().Button("–ù–∞–∑–∞–¥", bot, telegram.MatchTypeExact, b.handleStartSilentMenu)

  err = b.sendMessage(ctx, sendMessageParams{
    ChatId: chatId,
    Text: `–û–ø—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –≤–∫–ª—é—á–µ–Ω—ã 

–î–∞–ª–µ–µ, –≤—ã –º–æ–∂–µ—Ç–µ –æ—Å—Ç–∞–≤–∏—Ç—å –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –∫ –≤–∞—à–µ–º—É –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—é üí°
–û–Ω –±—É–¥–µ—Ç –æ—Ç–æ–±—Ä–∞–∂–∞—Ç—å—Å—è –ø—Ä–∏ –ø—Ä–æ—Å–º–æ—Ç—Ä–µ —Å–ø–∏—Å–∫–∞ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–π –∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –ø–æ —Ç–æ–≤–∞—Ä—É üí¨

–ï—Å–ª–∏ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –Ω–µ —Ç—Ä–µ–±—É–µ—Ç—Å—è, –ø—Ä–æ—Å—Ç–æ –ø–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ üì®`,
    Reply: reply,
  })
  if err != nil {
    log.
      WithField("chat_id", chatId).
      WithField("menu", models.TrackingFlagConfirmMenu).
      Errorf("b.sendMessage: %v", err)
  }
}

func (b *Transport) handleTrackingFlagOffMenu(ctx context.Context, bot *telegram.Bot, update *tgmodels.Update) {
  chatId, ok := findChatIdInUpdate(update)
  if !ok {
    log.
      WithField("update.message", update.Message).
      WithField("menu", models.TrackingFlagConfirmMenu).
      Warn("chat_id not found")

    return
  }

  session, err := b.findSession(ctx, chatId)
  if err != nil {
    log.
      WithField("chat_id", chatId).
      WithField("menu", models.TrackingFlagConfirmMenu).
      Errorf("b.findSession: %v", err)

    return
  }

  err = b.upsertSession(ctx, upsertSessionParams{
    ChatId:   chatId,
    Menu:     models.TrackingFlagConfirmMenu,
    Tracking: session.Tracking,
  })
  if err != nil {
    log.
      WithField("chat_id", chatId).
      WithField("menu", models.TrackingFlagConfirmMenu).
      Errorf("b.upsertSession: %v", err)

    return
  }

  reply := newReplyKeyboard(models.TrackingFlagConfirmMenu).
    Row().Button("–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å üì®", bot, telegram.MatchTypeExact, b.handleTrackingInsertConfirmMenu).
    Row().Button("–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π üí¨", bot, telegram.MatchTypeExact, b.handleTrackingCommentMenu).
    Row().Button("–ù–∞–∑–∞–¥", bot, telegram.MatchTypeExact, b.handleStartSilentMenu)

  err = b.sendMessage(ctx, sendMessageParams{
    ChatId: chatId,
    Text: `–û–ø—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ—Ç–∫–ª—é—á–µ–Ω—ã 

–î–∞–ª–µ–µ, –≤—ã –º–æ–∂–µ—Ç–µ –æ—Å—Ç–∞–≤–∏—Ç—å –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –∫ –≤–∞—à–µ–º—É –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—é üí°
–û–Ω –±—É–¥–µ—Ç –æ—Ç–æ–±—Ä–∞–∂–∞—Ç—å—Å—è –ø—Ä–∏ –ø—Ä–æ—Å–º–æ—Ç—Ä–µ —Å–ø–∏—Å–∫–∞ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–π –∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –ø–æ —Ç–æ–≤–∞—Ä—É üí¨ 

–ï—Å–ª–∏ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –Ω–µ —Ç—Ä–µ–±—É–µ—Ç—Å—è, –ø—Ä–æ—Å—Ç–æ –ø–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ üì®`,
    Reply: reply,
  })
  if err != nil {
    log.
      WithField("chat_id", chatId).
      WithField("menu", models.TrackingFlagConfirmMenu).
      Errorf("b.sendMessage: %v", err)
  }
}

func (b *Transport) handleTrackingInsertConfirmMenu(ctx context.Context, bot *telegram.Bot, update *tgmodels.Update) {
  chatId, ok := findChatIdInUpdate(update)
  if !ok {
    log.
      WithField("update.message", update.Message).
      WithField("menu", models.TrackingInsertConfirmMenu).
      Warn("chat_id not found")

    return
  }

  session, err := b.findSession(ctx, chatId)
  if err != nil {
    log.
      WithField("chat_id", chatId).
      WithField("menu", models.TrackingInsertConfirmMenu).
      Errorf("b.findSession: %v", err)

    return
  }

  if session.Tracking == nil {
    log.
      WithField("chat_id", chatId).
      WithField("menu", models.TrackingInsertConfirmMenu).
      WithField("session.tracking", session.Tracking).
      Warn("message skipped")

    return
  }

  err = b.insertTracking(ctx, *session.Tracking)
  if err != nil {
    log.
      WithField("chat_id", chatId).
      WithField("menu", models.TrackingInsertConfirmMenu).
      Errorf("b.insertTracking: %v", err)

    return
  }

  reply := newReplyKeyboard(models.TrackingInsertConfirmMenu).
    Row().Button("–ü–æ–º–æ—â—å üí°", bot, telegram.MatchTypeExact, b.handleStartMenu).
    Row().Button("–ú–æ–∏ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è ‚úâÔ∏è", bot, telegram.MatchTypeExact, b.handleTrackingMyMenu).
    Row().Button("–î–æ–±–∞–≤–∏—Ç—å –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ üì®", bot, telegram.MatchTypeExact, b.handleTrackingInsertMenu)

  err = b.sendMessage(ctx, sendMessageParams{
    ChatId: chatId,
    Text: `–û—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ –¥–ª—è —Ç–æ–≤–∞—Ä–∞ —Å–æ–∑–¥–∞–Ω–æ üòâ
–ú—ã –ø—Ä–∏—à–ª–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ, –∫–∞–∫ —Ç–æ–ª—å–∫–æ –ø–æ–ª—É—á–∏–º –Ω–æ–≤–æ—Å—Ç–∏ –ø–æ —Ç–æ–≤–∞—Ä—É üì¶`,
    Reply: reply,
  })
  if err != nil {
    log.
      WithField("chat_id", chatId).
      WithField("menu", models.TrackingInsertConfirmMenu).
      Errorf("b.sendMessage: %v", err)

    return
  }

  err = b.upsertSession(ctx, upsertSessionParams{
    ChatId: chatId,
    Menu:   models.TrackingInsertConfirmMenu,
  })
  if err != nil {
    log.
      WithField("chat_id", chatId).
      WithField("menu", models.TrackingInsertConfirmMenu).
      Errorf("b.upsertSession: %v", err)

    return
  }
}

func (b *Transport) handleTrackingSearchSilentInputMenu(ctx context.Context, bot *telegram.Bot, update *tgmodels.Update) {
  chatId, ok := findChatIdInUpdate(update)
  if !ok {
    log.
      WithField("update.message", update.Message).
      WithField("menu", models.TrackingSearchSilentInputMenu).
      Warn("chat_id not found")

    return
  }

  err := b.sendMessage(ctx, sendMessageParams{
    ChatId: chatId,
    Text:   `–í–≤–µ–¥–∏—Ç–µ –∫–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞ –¥–ª—è –ø–æ–∏—Å–∫–∞ üí¨`,
  })
  if err != nil {
    log.
      WithField("chat_id", chatId).
      WithField("menu", models.TrackingSearchSilentInputMenu).
      Errorf("b.sendMessage: %v", err)

    return
  }

  err = b.upsertSession(ctx, upsertSessionParams{
    ChatId: chatId,
    Menu:   models.TrackingSearchSilentInputMenu,
  })
  if err != nil {
    log.
      WithField("chat_id", chatId).
      WithField("menu", models.TrackingSearchSilentInputMenu).
      Errorf("b.upsertSession: %v", err)

    return
  }
}

func (b *Transport) handleTrackingSearchInputMenu(ctx context.Context, bot *telegram.Bot, update *tgmodels.Update) {
  chatId, ok := findChatIdInUpdate(update)
  if !ok {
    log.
      WithField("update.message", update.Message).
      WithField("menu", models.TrackingSearchInputMenu).
      Warn("chat_id not found")

    return
  }

  err := b.sendMessage(ctx, sendMessageParams{
    ChatId: chatId,
    Text: `–í–≤–µ–¥–∏—Ç–µ –∫–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞ –¥–ª—è –ø–æ–∏—Å–∫–∞ üí¨
–û–Ω–∏ –º–æ–≥—É—Ç —Å–æ–¥–µ—Ä–∂–∞—Ç—å—Å—è –≤ –Ω–∞–∑–≤–∞–Ω–∏–∏ –∏–ª–∏ –æ–ø–∏—Å–∞–Ω–∏–∏ —Ç–æ–≤–∞—Ä–∞, —Å—Å—ã–ª–∫–µ –∏–ª–∏ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏ –∫ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—é üí°`,
  })
  if err != nil {
    log.
      WithField("chat_id", chatId).
      WithField("menu", models.TrackingSearchInputMenu).
      Errorf("b.sendMessage: %v", err)

    return
  }

  err = b.upsertSession(ctx, upsertSessionParams{
    ChatId: chatId,
    Menu:   models.TrackingSearchInputMenu,
  })
  if err != nil {
    log.
      WithField("chat_id", chatId).
      WithField("menu", models.TrackingSearchInputMenu).
      Errorf("b.upsertSession: %v", err)

    return
  }
}

func (b *Transport) handleTrackingSearchShowMenu(ctx context.Context, bot *telegram.Bot, update *tgmodels.Update) {
  chatId, ok := findChatIdInUpdate(update)
  if !ok {
    log.
      WithField("update.message", update.Message).
      WithField("menu", models.TrackingSearchShowMenu).
      Warn("chat_id not found")

    return
  }

  reply := newReplyKeyboard(models.TrackingSearchShowMenu).
    Row().Button("–ù–∞–∑–∞–¥", bot, telegram.MatchTypeExact, b.handleStartSilentMenu)

  query := parseSearchQuery(update.Message.Text)

  list, err := b.searchTracking(ctx, query)

  if err != nil || len(list) == 0 {

    err = b.sendMessage(ctx, sendMessageParams{
      ChatId: chatId,
      Text: `–ü–æ—Ö–æ–∂–∏—Ö –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–π –Ω–µ –Ω–∞–π–¥–µ–Ω–æ üëÄ
–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∏—Å–∫–∞—Ç—å –µ—â–µ —Ä–∞–∑ üòâ`,
      Reply: reply,
    })
    if err != nil {
      log.
        WithField("chat_id", chatId).
        WithField("menu", models.TrackingSearchShowMenu).
        Errorf("b.sendMessage: %v", err)

      return
    }

    if err != nil {
      log.
        WithField("chat_id", chatId).
        WithField("menu", models.TrackingSearchShowMenu).
        Errorf("b.searchTracking: %v", err)
    }

    return
  }

  b.fillTrackingsCache(chatId, list)

  slider := b.newTrackingSlider(trackingSliderParams{
    ChatId:    chatId,
    Bot:       bot,
    Trackings: list,
  })

  if _, err = slider.Show(ctx, bot, chatId); err != nil {
    log.
      WithField("chat_id", chatId).
      WithField("menu", models.TrackingSearchShowMenu).
      Errorf("telegram.Slider.Show: %v", err)

    return
  }

  err = b.upsertSession(ctx, upsertSessionParams{
    ChatId: chatId,
    Menu:   models.TrackingSearchShowMenu,
  })
  if err != nil {
    log.
      WithField("chat_id", chatId).
      WithField("menu", models.TrackingSearchShowMenu).
      Errorf("b.upsertSession: %v", err)

    return
  }

  const messageDelay = time.Second
  time.Sleep(messageDelay)

  reply = newReplyKeyboard(models.TrackingSearchShowMenu).
    Row().Button("–ö –ø–æ–∏—Å–∫—É", bot, telegram.MatchTypeExact, b.handleTrackingSearchSilentInputMenu).
    Row().Button("–ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é", bot, telegram.MatchTypeExact, b.handleStartSilentMenu)

  err = b.sendMessage(ctx, sendMessageParams{
    ChatId: chatId,
    Text:   `–ü–æ–∏—Å–∫–∞—Ç—å –¥—Ä—É–≥–∏–µ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è?`,
    Reply:  reply,
  })
  if err != nil {
    log.
      WithField("chat_id", chatId).
      WithField("menu", models.TrackingSearchShowMenu).
      Errorf("b.sendMessage: %v", err)

    return
  }
}

func (b *Transport) handleTrackingMyMenu(ctx context.Context, bot *telegram.Bot, update *tgmodels.Update) {
  chatId, ok := findChatIdInUpdate(update)
  if !ok {
    log.
      WithField("update.message", update.Message).
      WithField("menu", models.TrackingMyMenu).
      Warn("chat_id not found")

    return
  }

  reply := newReplyKeyboard(models.TrackingMyMenu).
    Row().Button("–°–ø–∏—Å–æ–∫ üìã", bot, telegram.MatchTypeExact, b.handleTrackingListMenu).
    Row().Button("–ü–æ–∏—Å–∫ üîé", bot, telegram.MatchTypeExact, b.handleTrackingSearchInputMenu).
    Row().Button("–ù–∞–∑–∞–¥", bot, telegram.MatchTypeExact, b.handleStartSilentMenu)

  err := b.sendMessage(ctx, sendMessageParams{
    ChatId: chatId,
    Text: `–î–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –≤—Å–µ—Ö –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–π, –≤—ã–±–µ—Ä–∏—Ç–µ "–°–ø–∏—Å–æ–∫ üìã"
–î–ª—è –ø–æ–∏—Å–∫–∞ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω–æ–≥–æ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è, –≤—ã–±–µ—Ä–∏—Ç–µ "–ü–æ–∏—Å–∫ üîé"`,
    Reply: reply,
  })
  if err != nil {
    log.
      WithField("chat_id", chatId).
      WithField("menu", models.TrackingMyMenu).
      Errorf("b.sendMessage: %v", err)

    return
  }

  err = b.upsertSession(ctx, upsertSessionParams{
    ChatId: chatId,
    Menu:   models.TrackingMyMenu,
  })
  if err != nil {
    log.
      WithField("chat_id", chatId).
      WithField("menu", models.TrackingMyMenu).
      Errorf("b.upsertSession: %v", err)

    return
  }
}

func (b *Transport) handleTrackingListMenu(ctx context.Context, bot *telegram.Bot, update *tgmodels.Update) {
  chatId, ok := findChatIdInUpdate(update)
  if !ok {
    log.
      WithField("update.message", update.Message).
      WithField("menu", models.TrackingListMenu).
      Warn("chat_id not found")

    return
  }

  list, err := b.listTrackings(ctx, chatId)
  if err != nil {
    log.
      WithField("chat_id", chatId).
      WithField("menu", models.TrackingListMenu).
      Errorf("b.listTrackings: %v", err)

    return
  }

  b.fillTrackingsCache(chatId, list)

  if len(list) > 0 {
    slider := b.newTrackingSlider(trackingSliderParams{
      ChatId:    chatId,
      Bot:       bot,
      Trackings: list,
    })

    if _, err = slider.Show(ctx, bot, chatId); err != nil {
      log.
        WithField("chat_id", chatId).
        WithField("menu", models.TrackingListMenu).
        Errorf("telegram.Slider.Show: %v", err)

      return
    }
  } else {
    reply := newReplyKeyboard(models.TrackingListMenu).
      Row().Button("–ü–æ–º–æ—â—å üí°", bot, telegram.MatchTypeExact, b.handleStartMenu).
      Row().Button("–ú–æ–∏ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è ‚úâÔ∏è", bot, telegram.MatchTypeExact, b.handleTrackingMyMenu).
      Row().Button("–î–æ–±–∞–≤–∏—Ç—å –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ üì®", bot, telegram.MatchTypeExact, b.handleTrackingInsertMenu)

    err = b.sendMessage(ctx, sendMessageParams{
      ChatId: chatId,
      Text:   `–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–π üëÄ`,
      Reply:  reply,
    })
    if err != nil {
      log.
        WithField("chat_id", chatId).
        WithField("menu", models.TrackingListMenu).
        Errorf("b.sendMessage: %v", err)

      return
    }
  }

  err = b.upsertSession(ctx, upsertSessionParams{
    ChatId: chatId,
    Menu:   models.TrackingListMenu,
  })
  if err != nil {
    log.
      WithField("chat_id", chatId).
      WithField("menu", models.TrackingListMenu).
      Errorf("b.upsertSession: %v", err)

    return
  }
}

func (b *Transport) handleTrackingDeleteMenu(ctx context.Context, bot *telegram.Bot, message tgmodels.MaybeInaccessibleMessage, index int) {
  chatId, ok := findChatIdInMaybeInaccessible(message)
  if !ok {
    log.
      WithField("inaccessible_message", message).
      WithField("menu", models.TrackingDeleteMenu).
      Warn("chat_id not found")

    return
  }

  url, ok := b.findTrackingInCache(chatId, index)
  if !ok {
    log.
      WithField("chat_id", chatId).
      WithField("menu", models.TrackingDeleteMenu).
      WithField("tracking_index", index).
      Errorf("tracking url not found in cache")

    return
  }

  tracking, err := b.findTracking(ctx, chatId, url)
  if err != nil {
    log.
      WithField("chat_id", chatId).
      WithField("menu", models.TrackingDeleteMenu).
      Errorf("b.findTracking: %v", err)

    return
  }

  reply := newReplyKeyboard(models.TrackingDeleteMenu).
    Row().Button("–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å", bot, telegram.MatchTypeExact, b.handleTrackingDeleteConfirmMenu).
    Row().Button("–ù–∞–∑–∞–¥", bot, telegram.MatchTypeExact, b.handleStartSilentMenu)

  err = b.sendMessage(ctx, sendMessageParams{
    ChatId: chatId,
    Text:   `–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ? üóëÔ∏è`,
    Reply:  reply,
  })
  if err != nil {
    log.
      WithField("chat_id", chatId).
      WithField("menu", models.TrackingDeleteMenu).
      Errorf("b.sendMessage: %v", err)

    return
  }

  err = b.upsertSession(ctx, upsertSessionParams{
    ChatId:   chatId,
    Menu:     models.TrackingDeleteMenu,
    Tracking: tracking,
  })
  if err != nil {
    log.
      WithField("chat_id", chatId).
      WithField("menu", models.TrackingDeleteMenu).
      Errorf("b.upsertSession: %v", err)

    return
  }
}

func (b *Transport) handleTrackingSilentMenu(ctx context.Context, bot *telegram.Bot, message tgmodels.MaybeInaccessibleMessage) {
  chatId, ok := findChatIdInMaybeInaccessible(message)
  if !ok {
    log.
      WithField("inaccessible_message", message).
      WithField("menu", models.StartSilentMenu).
      Warn("chat_id not found")

    return
  }

  reply := newReplyKeyboard(models.StartSilentMenu).
    Row().Button("–ü–æ–º–æ—â—å üí°", bot, telegram.MatchTypeExact, b.handleStartMenu).
    Row().Button("–ú–æ–∏ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è ‚úâÔ∏è", bot, telegram.MatchTypeExact, b.handleTrackingMyMenu).
    Row().Button("–î–æ–±–∞–≤–∏—Ç—å –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ üì®", bot, telegram.MatchTypeExact, b.handleTrackingInsertMenu)

  err := b.sendMessage(ctx, sendMessageParams{
    ChatId: chatId,
    Text:   `–í—ã –≤–µ—Ä–Ω—É–ª–∏—Å—å –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é –±–æ—Ç–∞ üí¨`,
    Reply:  reply,
  })
  if err != nil {
    log.
      WithField("chat_id", chatId).
      WithField("menu", models.StartSilentMenu).
      Errorf("b.sendMessage: %v", err)

    return
  }

  err = b.upsertSession(ctx, upsertSessionParams{
    ChatId: chatId,
    Menu:   models.StartSilentMenu,
  })
  if err != nil {
    log.
      WithField("chat_id", chatId).
      WithField("menu", models.StartSilentMenu).
      Errorf("b.upsertSession: %v", err)

    return
  }
}

func (b *Transport) handleTrackingDeleteConfirmMenu(ctx context.Context, bot *telegram.Bot, update *tgmodels.Update) {
  chatId, ok := findChatIdInUpdate(update)
  if !ok {
    log.
      WithField("update.message", update.Message).
      WithField("menu", models.TrackingDeleteConfirmMenu).
      Warn("chat_id not found")

    return
  }

  session, err := b.findSession(ctx, chatId)
  if err != nil {
    log.
      WithField("chat_id", chatId).
      WithField("menu", models.TrackingDeleteConfirmMenu).
      Errorf("b.findSession: %v", err)

    return
  }

  err = b.deleteTracking(ctx, session)
  if err != nil {
    log.
      WithField("chat_id", chatId).
      WithField("menu", models.TrackingDeleteConfirmMenu).
      Errorf("b.deleteTracking: %v", err)

    return
  }

  reply := newReplyKeyboard(models.TrackingDeleteConfirmMenu).
    Row().Button("–ü–æ–º–æ—â—å üí°", bot, telegram.MatchTypeExact, b.handleStartMenu).
    Row().Button("–ú–æ–∏ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è ‚úâÔ∏è", bot, telegram.MatchTypeExact, b.handleTrackingMyMenu).
    Row().Button("–î–æ–±–∞–≤–∏—Ç—å –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ üì®", bot, telegram.MatchTypeExact, b.handleTrackingInsertMenu)

  err = b.sendMessage(ctx, sendMessageParams{
    ChatId: chatId,
    Text:   `–û—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω–æ üòâ`,
    Reply:  reply,
  })
  if err != nil {
    log.
      WithField("chat_id", chatId).
      WithField("menu", models.TrackingDeleteConfirmMenu).
      Errorf("b.sendMessage: %v", err)

    return
  }

  err = b.upsertSession(ctx, upsertSessionParams{
    ChatId: chatId,
    Menu:   models.TrackingDeleteConfirmMenu,
  })
  if err != nil {
    log.
      WithField("chat_id", chatId).
      WithField("menu", models.TrackingDeleteConfirmMenu).
      Errorf("b.upsertSession: %v", err)

    return
  }
}

func (b *Transport) handleShopList(ctx context.Context, bot *telegram.Bot, update *tgmodels.Update) {
  chatId, ok := findChatIdInUpdate(update)
  if !ok {
    log.
      WithField("update.message", update.Message).
      WithField("menu", models.TrackingDeleteConfirmMenu).
      Warn("chat_id not found")

    return
  }

  reply := newReplyKeyboard(models.ShopListMenu).
    Row().Button("–ù–∞–∑–∞–¥", bot, telegram.MatchTypeExact, b.handleStartSilentMenu)

  err := b.sendMessage(ctx, sendMessageParams{
    ChatId: chatId,
    Text: `–ú–∞–≥–∞–∑–∏–Ω—ã, —Å –∫–æ—Ç–æ—Ä—ã–º–∏ —Ä–∞–±–æ—Ç–∞–µ—Ç –±–æ—Ç:
1. Lamoda
2. Lime
3. Kixbox
4. Ridestep
5. –¢—Ä–∞–µ–∫—Ç–æ—Ä–∏—è
6. –û–∫—Ç—è–±—Ä—å –°–∫–µ–π—Ç—à–æ–ø
–°–ø–∏—Å–æ–∫ –ø–æ—Å—Ç–µ–ø–µ–Ω–Ω–æ –±—É–¥–µ—Ç –ø–æ–ø–æ–ª–Ω—è—Ç—å—Å—è ü§ì`,
    Reply: reply,
  })
  if err != nil {
    log.
      WithField("chat_id", chatId).
      WithField("menu", models.TrackingDeleteConfirmMenu).
      Errorf("b.sendMessage: %v", err)

    return
  }

  err = b.upsertSession(ctx, upsertSessionParams{
    ChatId: chatId,
    Menu:   models.ShopListMenu,
  })
  if err != nil {
    log.
      WithField("chat_id", chatId).
      WithField("menu", models.ShopListMenu).
      Errorf("b.upsertSession: %v", err)

    return
  }
}

func (b *Transport) handleInsertIssueMenu(ctx context.Context, bot *telegram.Bot, update *tgmodels.Update) {
  chatId, ok := findChatIdInUpdate(update)
  if !ok {
    log.
      WithField("update.message", update.Message).
      WithField("menu", models.IssueInsertMenu).
      Warn("chat_id not found")

    return
  }

  reply := newReplyKeyboard(models.IssueInsertMenu).
    Row().Button("–£–ª—É—á—à–µ–Ω–∏–µ üë®‚Äçüîß", bot, telegram.MatchTypeExact, b.handleIssueInputStoryMenu).
    Row().Button("–ë–∞–≥ üòü", bot, telegram.MatchTypeExact, b.handleIssueInputBugMenu).
    Row().Button("–ù–∞–∑–∞–¥", bot, telegram.MatchTypeExact, b.handleStartSilentMenu)

  err := b.sendMessage(ctx, sendMessageParams{
    ChatId: chatId,
    Text: `–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é –æ–±—Ä–∞—Ç–Ω–æ–π —Å–≤—è–∑–∏: 
–±–∞–≥ –∏–ª–∏ —É–ª—É—á—à–µ–Ω–∏–µ üòâ`,
    Reply: reply,
  })
  if err != nil {
    log.
      WithField("chat_id", chatId).
      WithField("menu", models.IssueInsertMenu).
      Errorf("b.sendMessage: %v", err)

    return
  }
}

func (b *Transport) handleIssueInputTextMenu(ctx context.Context, bot *telegram.Bot, update *tgmodels.Update) {
  chatId, ok := findChatIdInUpdate(update)
  if !ok {
    log.
      WithField("update.message", update.Message).
      WithField("menu", models.IssueInputTextMenu).
      Warn("chat_id not found")

    return
  }

  session, err := b.findSession(ctx, chatId)
  if err != nil {
    log.
      WithField("chat_id", chatId).
      WithField("menu", models.IssueInputTextMenu).
      Errorf("b.findSession: %v", err)

    return
  }

  session.Entities.Issue.Text = parseIssueText(update.Message.Text)

  err = b.upsertSession(ctx, upsertSessionParams{
    ChatId:   chatId,
    Menu:     models.IssueInputTextMenu,
    Entities: session.Entities,
  })
  if err != nil {
    log.
      WithField("chat_id", chatId).
      WithField("menu", models.IssueInputTextMenu).
      Errorf("b.upsertSession: %v", err)

    return
  }

  reply := newReplyKeyboard(models.IssueInputTextMenu).
    Row().Button("–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å üìß", bot, telegram.MatchTypeExact, b.handleIssueInsertConfirmMenu).
    Row().Button("–ù–∞–∑–∞–¥", bot, telegram.MatchTypeExact, b.handleStartSilentMenu)

  err = b.sendMessage(ctx, sendMessageParams{
    ChatId: chatId,
    Text:   `–ú—ã –ø–æ–ª—É—á–∏–ª–∏ –≤–∞—à–µ —Å–æ–æ–±—â–µ–Ω–∏–µ, –æ—Å—Ç–∞–ª–æ—Å—å –µ–≥–æ –ø–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å üìß`,
    Reply:  reply,
  })
  if err != nil {
    log.
      WithField("chat_id", chatId).
      WithField("menu", models.IssueInsertMenu).
      Errorf("b.sendMessage: %v", err)

    return
  }
}

func (b *Transport) handleIssueInsertConfirmMenu(ctx context.Context, bot *telegram.Bot, update *tgmodels.Update) {
  chatId, ok := findChatIdInUpdate(update)
  if !ok {
    log.
      WithField("update.message", update.Message).
      WithField("menu", models.IssueInsertConfirmMenu).
      Warn("chat_id not found")

    return
  }

  session, err := b.findSession(ctx, chatId)
  if err != nil {
    log.
      WithField("chat_id", chatId).
      WithField("menu", models.IssueInsertConfirmMenu).
      Errorf("b.findSession: %v", err)

    return
  }

  err = b.insertIssue(ctx, session.Entities.Issue)
  if err != nil {
    log.
      WithField("chat_id", chatId).
      WithField("menu", models.IssueInsertConfirmMenu).
      Errorf("b.insertIssue: %v", err)

    return
  }

  reply := newReplyKeyboard(models.IssueInsertConfirmMenu).
    Row().Button("–ù–∞–∑–∞–¥", bot, telegram.MatchTypeExact, b.handleStartSilentMenu)

  err = b.sendMessage(ctx, sendMessageParams{
    ChatId: chatId,
    Text:   `–°–ø–∞—Å–∏–±–æ –∑–∞ –≤–∞—à—É –æ–±—Ä–∞—Ç–Ω—É—é —Å–≤—è–∑—å üòâ`,
    Reply:  reply,
  })
  if err != nil {
    log.
      WithField("chat_id", chatId).
      WithField("menu", models.IssueInsertConfirmMenu).
      Errorf("b.sendMessage: %v", err)

    return
  }
}

func (b *Transport) handleIssueInputBugMenu(ctx context.Context, bot *telegram.Bot, update *tgmodels.Update) {
  chatId, ok := findChatIdInUpdate(update)
  if !ok {
    log.
      WithField("update.message", update.Message).
      WithField("menu", models.IssueInputTypeMenu).
      Warn("chat_id not found")

    return
  }

  reply := newReplyKeyboard(models.IssueInputTypeMenu).
    Row().Button("–ù–∞–∑–∞–¥", bot, telegram.MatchTypeExact, b.handleStartSilentMenu)

  err := b.sendMessage(ctx, sendMessageParams{
    ChatId: chatId,
    Text:   `–û–ø–∏—à–∏—Ç–µ –≤–æ–∑–Ω–∏–∫—à—É—é —É –≤–∞—Å –ø—Ä–æ–±–ª–µ–º—É üí¨`,
    Reply:  reply,
  })
  if err != nil {
    log.
      WithField("chat_id", chatId).
      WithField("menu", models.IssueInputTypeMenu).
      Errorf("b.sendMessage: %v", err)

    return
  }

  err = b.upsertSession(ctx, upsertSessionParams{
    ChatId: chatId,
    Menu:   models.IssueInputTypeMenu,
    Entities: &models.SessionEntities{
      Issue: &models.Issue{
        ChatId:    chatId,
        Type:      models.IssueTypeBug,
        CreatedAt: time.Now(),
      },
    },
  })
  if err != nil {
    log.
      WithField("chat_id", chatId).
      WithField("menu", models.IssueInputTypeMenu).
      Errorf("b.upsertSession: %v", err)

    return
  }
}

func (b *Transport) handleIssueInputStoryMenu(ctx context.Context, bot *telegram.Bot, update *tgmodels.Update) {
  chatId, ok := findChatIdInUpdate(update)
  if !ok {
    log.
      WithField("update.message", update.Message).
      WithField("menu", models.IssueInputTypeMenu).
      Warn("chat_id not found")

    return
  }

  reply := newReplyKeyboard(models.IssueInputTypeMenu).
    Row().Button("–ù–∞–∑–∞–¥", bot, telegram.MatchTypeExact, b.handleStartSilentMenu)

  err := b.sendMessage(ctx, sendMessageParams{
    ChatId: chatId,
    Text:   `–û–ø–∏—à–∏—Ç–µ —É–ª—É—á—à–µ–Ω–∏—è –±–æ—Ç–∞, –∫–æ—Ç–æ—Ä—ã–µ –≤–∞–º —Ö–æ—Ç–µ–ª–æ—Å—å –±—ã –≤–∏–¥–µ—Ç—å üí¨`,
    Reply:  reply,
  })
  if err != nil {
    log.
      WithField("chat_id", chatId).
      WithField("menu", models.IssueInputTypeMenu).
      Errorf("b.sendMessage: %v", err)

    return
  }

  err = b.upsertSession(ctx, upsertSessionParams{
    ChatId: chatId,
    Menu:   models.IssueInputTypeMenu,
    Entities: &models.SessionEntities{
      Issue: &models.Issue{
        ChatId:    chatId,
        Type:      models.IssueTypeStory,
        CreatedAt: time.Now(),
      },
    },
  })
  if err != nil {
    log.
      WithField("chat_id", chatId).
      WithField("menu", models.IssueInputTypeMenu).
      Errorf("b.upsertSession: %v", err)

    return
  }
}
